import java.util.*;

public class Solution {
    public ArrayList<ArrayList<Integer>> combine(int n, int k) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        if(n==0||k==0)
            return result;
//        if(num.length==1) {
//            ArrayList<Integer> temp = new ArrayList<Integer>();
//            temp.add(num[0]);
//            result.add(temp);
//            return result;
//        }
        ArrayList<Integer> temp = new ArrayList<Integer>();

        dfs(result , temp, n, k, 1);
        return result;
    }
        public static void dfs(ArrayList<ArrayList<Integer>> res, ArrayList<Integer> temp, int nums, int k, int cur)
    {
        if(temp.size() == k){
            res.add(new ArrayList<>(temp));
        }
        int i = cur;

        while(i<=nums){
            //if(used[i]==false) {
                //System.out.print("AA");
                temp.add(i);
                //used[i] = true;
                dfs(res,temp,nums,k,i+1);
                //used[i] = false;
                temp.remove(temp.size() - 1);
            //}
            i++;
        }
    }
}
public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;

        if(m==0||n==0){
            return 0;
        }

        if(obstacleGrid[m-1][n-1]==1||obstacleGrid[0][0]==1)
            return 0;

        if(m==1||n==1){
            return 1;
        }

        int i = 0, j = 0;
        while(i<m){
            j = 0;
            while(j<n){
                if(obstacleGrid[i][j]==1){
                    obstacleGrid[i][j] = Integer.MAX_VALUE;
                }
                j++;
            }
            i++;
        }

        i = n-1;
        while(i!=-1){
            if(obstacleGrid[m-1][i]==Integer.MAX_VALUE){
                break;
            }
            obstacleGrid[m-1][i] = 1;
            i--;
        }
        
        i = m-1;
        while(i!=-1){
            if(obstacleGrid[i][n-1]==Integer.MAX_VALUE){
                break;
            }
            obstacleGrid[i][n-1] = 1;
            i--;
        }

        j = n-2;
        i = m-2;
        while(i>=0){
            j= n-2;
            while(j>=0){
                if(obstacleGrid[i][j]==Integer.MAX_VALUE) {
                    j--;
                    continue;
                }
                if(obstacleGrid[i+1][j]==Integer.MAX_VALUE&&obstacleGrid[i][j+1]==Integer.MAX_VALUE){
                    obstacleGrid[i][j] = 0;
                }else if(obstacleGrid[i+1][j]==Integer.MAX_VALUE){
                    obstacleGrid[i][j] = obstacleGrid[i][j+1];
                }else if(obstacleGrid[i][j+1]==Integer.MAX_VALUE){
                    obstacleGrid[i][j] = obstacleGrid[i+1][j];
                } else
                    obstacleGrid[i][j] = obstacleGrid[i+1][j]+obstacleGrid[i][j+1];
                j--;
            }
            i--;
        }

        return obstacleGrid[0][0];

    }
}
public class Solution {
    public void solve(char[][] board) {
        if(board==null||board.length<3||board[0].length<3){
            return ;
        }
        int i = 0,j = 0;
        int m = board.length;
        int n = board[0].length;
        //第一次遍历
        while(i<m)
        {
            if(board[i][0]=='O')
            {
                //System.out.println("A");
                bfs(board, i,0,m,n);
                //printCharArr(board);
            }
            i++;
        }
        i = 0;
        j = n - 1;
        while (i<m)
        {
            if(board[i][j]=='O')
            {
                //System.out.println("B");
                bfs(board, i, j,m,n);
                //printCharArr(board);
            }
            i++;
        }
        j = 0;
        while(j<n)
        {
            if(board[0][j]=='O')
            {
                //System.out.println("C");
                bfs(board, 0, j,m,n);
                //printCharArr(board);
            }
            j++;
        }
        j = 0;
        i = m - 1;
        while (j<n)
        {
            if(board[i][j]=='O')
            {
                //System.out.println("D");
                bfs(board, i, j,m,n);
                //printCharArr(board);
            }
            j++;
        }
        
        i = 0;
        while(i<board.length){
            j = 0;
            while(j<board[0].length){
                if(board[i][j]=='O')
                    board[i][j]='X';
                j++;
            }
            i++;
        }
        i = 0;
        while(i<board.length){
            j = 0;
            while(j<board[0].length){
                if(board[i][j]=='*')
                    board[i][j]='O';
                j++;
            }
            i++;
        }
    }
    
   public static void bfs(char[][] board, int i , int j, int m, int n){
        if(board[i][j]=='O')
        {
            board[i][j]='*';
            if(i+1<m)
                bfs(board, i + 1, j,m,n);
            if(i-1>=0)
            bfs(board,i-1,j,m,n);
            if(j+1<n)
                bfs(board,i,j+1,m,n);
            if(j-1>=0)
                bfs(board,i,j-1,m,n);
        }
    }
}
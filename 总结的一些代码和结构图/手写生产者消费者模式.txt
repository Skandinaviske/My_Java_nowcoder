//基于Syn关键字的实现

public class ProducterConsumer {

    private static int sum = 10;
    static int count = 0;
    private static String LOCK = "lock";

    class Producer implements Runnable{

        @Override
        public void run() {
            for(int i = 0; i < 1000; i++){
                try {
                    Thread.sleep(1);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                synchronized (LOCK){
                    while (count == sum){
                        try {
                            LOCK.wait();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                    count++;
                    System.out.println(Thread.currentThread().getName()+" "+"生产了"+count+"个产品");
                    LOCK.notifyAll();
                }
            }
        }
    }

    class Consumer implements Runnable{

        @Override
        public void run() {
            for(int i = 0; i < 1000; i++){
                try {
                    Thread.sleep(1);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                synchronized (LOCK){
                    while (count == 0){
                        try {
                            LOCK.wait();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                    count--;
                    System.out.println(Thread.currentThread().getName()+" "+"还剩"+count+"个产品");
                    LOCK.notifyAll();
                }
            }
        }
    }

    public static void main(String[] args) {
        ProducterConsumer producterConsumer = new ProducterConsumer();
        new Thread(producterConsumer.new Producer()).start();
        new Thread(producterConsumer.new Consumer()).start();
    }
}

//基于ReentrantLock的实现

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

public class ReentrantLockTest {
    final  static private int Max_Value = 10;
    private  static int count = 0;
    static private String lock = "Lock";
    static ReentrantLock newLock = new ReentrantLock();

    private static final Condition notFull = newLock.newCondition();

    static class Consumer implements Runnable{
        @Override
        public void run() {

            for(int i = 0; i<100; i++){

                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                //synchronized (lock) {
                newLock.lock();
                    count--;
                    System.out.println("我是消费者 "+"现在还有"+count+"个");
                    while (count == 0) {
                        try {
                            notFull.await();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                notFull.signalAll();
                 newLock.unlock();
                //}
            }
        }

    }

    static class Producer implements Runnable{

        @Override
        public void run() {
            for(int i = 0; i<100; i++) {

                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                newLock.lock();
                //synchronized (lock) {
                    count++;
                    System.out.println("我是生产者 "+"现在还有"+count+"个");
                    while (count == Max_Value) {
                        try {
                            notFull.await();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                notFull.signalAll();
                newLock.unlock();
                //}
            }
        }
    }

    public static void main(String[] args) throws InterruptedException {
        Consumer consumer = new Consumer();
        Producer producer = new Producer();
        new Thread(producer).start();

        Thread.sleep(1000);
        new Thread(consumer).start();
    }
}

